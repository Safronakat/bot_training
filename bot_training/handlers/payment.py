from aiogram import Router
from aiogram.types import CallbackQuery
import logging

from data.temporary_storage import TemporaryStorage
from services.google_sheets import GoogleSheetsManager
from services.group_manager import GroupManager
from config import ADMIN_IDS, GOOGLE_SHEETS_CREDENTIALS, SHEET_URL

router = Router()
logger = logging.getLogger(__name__)

@router.callback_query(lambda c: c.data == 'make_payment')
async def process_payment(callback: CallbackQuery):
    try:
        user_data = TemporaryStorage.get_user_data(callback.from_user.id)
        
        if not user_data:
            await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.", show_alert=True)
            return
        
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
        user_data['payment_status'] = 'paid'
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
        sheets_manager = GoogleSheetsManager(GOOGLE_SHEETS_CREDENTIALS, SHEET_URL)
        
        if sheets_manager.save_user_data(user_data):
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
            group_info = sheets_manager.get_group_info_for_date(
                user_data['level'], 
                user_data['date']
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
            group_manager = GroupManager(callback.bot, ADMIN_IDS)
            
            group_result = await group_manager.add_user_to_group(
                level=user_data['level'],
                date=user_data['date'],
                user_id=callback.from_user.id,
                user_data=user_data,
                group_link=group_info.get('group_link') if group_info.get('group_exists') else None
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await group_manager.send_group_info_to_user(callback.from_user.id, group_result)
            
            if group_result["success"]:
                if group_result.get("status") == "link_provided":
                    success_message = (
                        "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
                        "–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. "
                        "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø–µ!\n\n"
                        "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! üéâ"
                    )
                else:
                    success_message = (
                        "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
                        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞—Å—Ç –≥—Ä—É–ø–ø—É –∏ –¥–æ–±–∞–≤–∏—Ç –≤–∞—Å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. "
                        "–° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.\n\n"
                        "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! üéâ"
                    )
            else:
                success_message = (
                    "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
                    "‚ö†Ô∏è –í–æ–∑–Ω–∏–∫–ª–∏ –Ω–µ–±–æ–ª—å—à–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏. "
                    "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! üéâ"
                )
            
            await callback.message.edit_text(success_message)
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            TemporaryStorage.delete_user_data(callback.from_user.id)
            
        else:
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in payment process: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
        await callback.answer()