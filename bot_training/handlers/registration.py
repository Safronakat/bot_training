from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from data.temporary_storage import TemporaryStorage
from keyboards.inline_kb import get_levels_keyboard

router = Router()

class Registration(StatesGroup):
    waiting_for_info = State()


@router.message(Registration.waiting_for_info)
async def process_user_info(message: Message, state: FSMContext):
    user_input = message.text.strip()
    print(f"Received input: {user_input}") 
    
   
    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø–µ—Ä–≤–æ–π –∑–∞–ø—è—Ç–æ–π
        if ',' in user_input:
            full_name, city = user_input.split(',', 1)
        else:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–ø—è—Ç—É—é –º–µ–∂–¥—É –§–ò–û –∏ –≥–æ—Ä–æ–¥–æ–º. –ù–∞–ø—Ä–∏–º–µ—Ä: Ivan Ivanov, Moscow")
            return
        
        full_name = full_name.strip()
        city = city.strip()
        
        if not full_name or not city:
            await message.answer("‚ùå –ò –§–ò–û –∏ –≥–æ—Ä–æ–¥ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: Ivan Ivanov, Moscow")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        user_data = {
            'user_id': message.from_user.id,
            'full_name': full_name,
            'city': city,
            'username': message.from_user.username
        }
        
        print(f"Saving user data: {user_data}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        TemporaryStorage.save_user_data(message.from_user.id, user_data)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        saved_data = TemporaryStorage.get_user_data(message.from_user.id)
        print(f"Retrieved data: {saved_data}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        
        if saved_data != user_data:
            print("Data mismatch: saved data does not match input data.")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        await state.clear()
        
        await message.answer(
            f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n"
            f"üë§ –§–ò–û: {full_name}\n"
            f"üèô –ì–æ—Ä–æ–¥: {city}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è:",
            reply_markup=get_levels_keyboard()
        )
        
    except Exception as e:
        print(f"Error: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –§–æ—Ä–º–∞—Ç: –§–ò–û, –ì–æ—Ä–æ–¥")
        return  # –í–æ–∑–≤—Ä–∞—Ç, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
