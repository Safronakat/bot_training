from aiogram import Router
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
import logging

from config import LEVELS
from services.google_sheets import GoogleSheetsManager
from keyboards.inline_kb import get_dates_keyboard, get_levels_keyboard
from data.temporary_storage import TemporaryStorage

router = Router()
logger = logging.getLogger(__name__)

@router.callback_query(lambda c: c.data.startswith('level_'))
async def process_level_selection(callback: CallbackQuery, state: FSMContext):
    try:
        level_key = callback.data.split('_')[1]
        
        if level_key not in LEVELS:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Ä–æ–≤–µ–Ω—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        user_data = TemporaryStorage.get_user_data(callback.from_user.id)
        user_data['level'] = LEVELS[level_key]
        user_data['level_key'] = level_key
        TemporaryStorage.save_user_data(callback.from_user.id, user_data)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –∏–∑ Google Sheets
        from config import GOOGLE_SHEETS_CREDENTIALS, SHEET_URL  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–ø—Ä—è–º—É—é
        sheets_manager = GoogleSheetsManager(GOOGLE_SHEETS_CREDENTIALS, SHEET_URL)
        
        dates = sheets_manager.get_dates_for_level(LEVELS[level_key])
        
        # –î–ï–ë–ê–ì: –õ–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –∏—â–µ–º –∏ —á—Ç–æ –Ω–∞—à–ª–∏
        logger.info(f"Searching dates for level: '{LEVELS[level_key]}'")
        logger.info(f"Found dates: {dates}")
        
        if not dates:
            message_text = (
                "‚ùå –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            keyboard = get_levels_keyboard()
        else:
            message_text = f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —É—Ä–æ–≤–Ω—è {LEVELS[level_key]}:"
            keyboard = get_dates_keyboard(dates)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–∫–∏
        try:
            await callback.message.edit_text(
                message_text,
                reply_markup=keyboard
            )
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                logger.info("Message not modified - ignoring error")
                pass
            else:
                # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
                raise
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in level selection: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)

@router.callback_query(lambda c: c.data == 'back_to_levels')
async def back_to_levels(callback: CallbackQuery):
    try:
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –æ–±—É—á–µ–Ω–∏—è:",
            reply_markup=get_levels_keyboard()
        )
        await callback.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            pass
        else:
            raise