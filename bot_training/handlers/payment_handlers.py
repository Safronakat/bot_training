from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ContentType, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging
from datetime import datetime

from data.temporary_storage import TemporaryStorage
from services.google_sheets import GoogleSheetsManager
from services.group_manager import GroupManager
from config import ADMIN_IDS, GOOGLE_SHEETS_CREDENTIALS, SHEET_URL, PAYMENT_DETAILS, PRICES, calculate_prepayment
from keyboards.inline_kb import get_payment_confirmation_keyboard, get_receipt_confirmation_keyboard

router = Router()
logger = logging.getLogger(__name__)

class PaymentStates(StatesGroup):
    waiting_for_receipt = State()

@router.callback_query(lambda c: c.data == 'start_payment')
async def start_payment_process(callback: CallbackQuery, state: FSMContext):
    try:
        user_data = TemporaryStorage.get_user_data(callback.from_user.id)
        
        if not user_data:
            await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.", show_alert=True)
            return
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É
        level_key = user_data.get('level_key')
        full_price = PRICES.get(level_key, 0)
        prepayment = calculate_prepayment(level_key)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—ã –≤ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data['full_price'] = full_price
        user_data['prepayment'] = prepayment
        TemporaryStorage.save_user_data(callback.from_user.id, user_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã
        payment_text = (
            "üí≥ **–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:**\n\n"
            f"üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: `{PAYMENT_DETAILS['phone_number']}`\n"
            f"üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞: `{PAYMENT_DETAILS['bank_card']}`\n\n"
            f"üí∞ **–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ (–ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ 50%): {prepayment} —Ä—É–±.**\n"
            f"üí∞ –ü–æ–ª–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞: {full_price} —Ä—É–±.\n\n"
            f"üí° **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**\n{PAYMENT_DETAILS['instructions']}\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –≤ —ç—Ç–æ—Ç —á–∞—Ç."
        )
        
        await callback.message.edit_text(
            payment_text,
            reply_markup=get_receipt_confirmation_keyboard()
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —á–µ–∫–∞
        await state.set_state(PaymentStates.waiting_for_receipt)
        await state.update_data(user_id=callback.from_user.id)
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in payment start: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)


@router.message(PaymentStates.waiting_for_receipt, F.content_type.in_([ContentType.PHOTO, ContentType.DOCUMENT]))
async def handle_receipt(message: Message, state: FSMContext):
    try:
        state_data = await state.get_data()
        user_id = state_data.get('user_id')
        
        if user_id != message.from_user.id:
            return
        
        user_data = TemporaryStorage.get_user_data(user_id)
        
        if not user_data:
            await message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–∫–µ
        user_data['receipt_sent'] = True
        user_data['payment_status'] = 'pending_verification'
        TemporaryStorage.save_user_data(user_id, user_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        await send_receipt_to_admins(message, user_data)
        
        await message.answer(
            "‚úÖ –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –æ–ø–ª–∞—Ç—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
            "–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã –±—É–¥–µ—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —É—á–µ–±–Ω—É—é –≥—Ä—É–ø–ø—É."
        )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error handling receipt: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–µ–∫–∞.")

@router.message(PaymentStates.waiting_for_receipt)
async def handle_wrong_receipt_format(message: Message):
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –≤ –≤–∏–¥–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞.\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
    )

def get_file_id(message: Message) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç file_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if message.content_type == ContentType.PHOTO:
        return message.photo[-1].file_id
    elif message.content_type == ContentType.DOCUMENT:
        return message.document.file_id
    return ""

async def send_receipt_to_admins(message: Message, user_data: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á–µ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ–∫ –≤ –æ–∂–∏–¥–∞—é—â–∏–µ
    receipt_data = {
        'user_data': user_data,
        'message_id': message.message_id,
        'file_id': get_file_id(message),
        'content_type': message.content_type,
        'timestamp': datetime.now().isoformat()
    }
    TemporaryStorage.add_pending_receipt(user_data['user_id'], receipt_data)
    
    receipt_info = (
        "üßæ **–ù–û–í–´–ô –ß–ï–ö –î–õ–Ø –ü–†–û–í–ï–†–ö–ò**\n\n"
        f"üë§ **–§–ò–û:** {user_data['full_name']}\n"
        f"üèô **–ì–æ—Ä–æ–¥:** {user_data['city']}\n"
        f"üìö **–£—Ä–æ–≤–µ–Ω—å:** {user_data['level']}\n"
        f"üìÖ **–î–∞—Ç–∞:** {user_data['date']}\n"
        f"üÜî **User ID:** {user_data['user_id']}\n"
        f"üë§ **Username:** @{user_data.get('username', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"‚è∞ **–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:** {datetime.now().strftime('%H:%M %d.%m.%Y')}\n\n"
        "üëá **–ß–µ–∫ –Ω–∏–∂–µ** üëá"
    )
    
    for admin_id in ADMIN_IDS:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            admin_message = await message.bot.send_message(admin_id, receipt_info)
            
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–∞–º —á–µ–∫ (—Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç)
            if message.content_type == ContentType.PHOTO:
                photo = message.photo[-1]
                await message.bot.send_photo(admin_id, photo.file_id)
            elif message.content_type == ContentType.DOCUMENT:
                await message.bot.send_document(admin_id, message.document.file_id)
                
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º user_id
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", 
                    callback_data=f"confirm_payment_{user_data['user_id']}"
                )],
                [InlineKeyboardButton(
                    text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", 
                    callback_data=f"reject_payment_{user_data['user_id']}"
                )],
                [InlineKeyboardButton(
                    text="üìã –í—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ —á–µ–∫–∏", 
                    callback_data="show_pending_receipts"
                )]
            ])
            
            await message.bot.send_message(
                admin_id, 
                f"üí¨ –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —á–µ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['full_name']}:",
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"Error sending receipt to admin {admin_id}: {e}")

# –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –æ–∂–∏–¥–∞—é—â–∏—Ö —á–µ–∫–æ–≤
@router.callback_query(lambda c: c.data == 'show_pending_receipts')
async def show_pending_receipts(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —á–µ–∫–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    try:
        pending_receipts = TemporaryStorage.get_all_pending_receipts()
        
        if not pending_receipts:
            await callback.message.answer("üì≠ –ù–µ—Ç —á–µ–∫–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏.")
            await callback.answer()
            return
        
        response = "üìã **–ß–µ–∫–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:**\n\n"
        
        for user_id, receipt_data in pending_receipts.items():
            user_data = receipt_data.get('user_data', {})
            response += (
                f"üë§ {user_data.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} "
                f"(ID: {user_id})\n"
                f"üìö {user_data.get('level', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} ‚Ä¢ "
                f"üìÖ {user_data.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"‚è∞ {receipt_data.get('timestamp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            )
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=f"üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å {user_data.get('full_name', 'Unknown')}",
                    callback_data=f"review_receipt_{user_id}"
                )]
            ])
            
            await callback.message.answer(response, reply_markup=keyboard)
            response = ""  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing pending receipts: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —á–µ–∫–æ–≤")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–µ–∫–∞
@router.callback_query(lambda c: c.data.startswith('review_receipt_'))
async def review_receipt(callback: CallbackQuery):
    """–ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–µ–∫–∞"""
    try:
        user_id = int(callback.data.split('_')[-1])
        receipt_data = TemporaryStorage.get_pending_receipt(user_id)
        
        if not receipt_data:
            await callback.answer("‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            return
        
        user_data = receipt_data.get('user_data', {})
        
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–∫–µ
        receipt_info = (
            "üîç **–ü–†–û–í–ï–†–ö–ê –ß–ï–ö–ê**\n\n"
            f"üë§ **–§–ò–û:** {user_data['full_name']}\n"
            f"üèô **–ì–æ—Ä–æ–¥:** {user_data['city']}\n"
            f"üìö **–£—Ä–æ–≤–µ–Ω—å:** {user_data['level']}\n"
            f"üìÖ **–î–∞—Ç–∞:** {user_data['date']}\n"
            f"‚è∞ **–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:** {receipt_data.get('timestamp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", 
                callback_data=f"confirm_payment_{user_id}"
            )],
            [InlineKeyboardButton(
                text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", 
                callback_data=f"reject_payment_{user_id}"
            )],
            [InlineKeyboardButton(
                text="üìã –í—Å–µ —á–µ–∫–∏", 
                callback_data="show_pending_receipts"
            )]
        ])
        
        await callback.message.answer(receipt_info, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error reviewing receipt: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–µ–∫–∞")

@router.callback_query(lambda c: c.data.startswith('confirm_payment_'))
async def confirm_payment(callback: CallbackQuery):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—É"""
    try:
        user_id = int(callback.data.split('_')[-1])
        receipt_data = TemporaryStorage.get_pending_receipt(user_id)
        
        if not receipt_data:
            await callback.answer("‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            return
        
        user_data = receipt_data.get('user_data', {})
        
        if not user_data:
            await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
        user_data['payment_status'] = 'confirmed'
        user_data['verified_by'] = callback.from_user.id
        user_data['verified_at'] = datetime.now().isoformat()
        
        TemporaryStorage.save_user_data(user_id, user_data)
        TemporaryStorage.remove_pending_receipt(user_id)  # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
        sheets_manager = GoogleSheetsManager(GOOGLE_SHEETS_CREDENTIALS, SHEET_URL)
        sheets_manager.save_user_data(user_data)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
        group_manager = GroupManager(callback.bot, ADMIN_IDS)
        group_info = sheets_manager.get_group_info_for_date(user_data['level'], user_data['date'])
        
        group_result = await group_manager.add_user_to_group(
            level=user_data['level'],
            date=user_data['date'],
            user_id=user_id,
            user_data=user_data,
            group_link=group_info.get('group_link') if group_info.get('group_exists') else None
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await callback.bot.send_message(
            user_id,
            "‚úÖ –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º! –í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —É—á–µ–±–Ω—É—é –≥—Ä—É–ø–ø—É.\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! üéâ"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        await callback.message.edit_text(
            f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['full_name']}\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error confirming payment: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã")

@router.callback_query(lambda c: c.data.startswith('reject_payment_'))
async def reject_payment(callback: CallbackQuery):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –æ–ø–ª–∞—Ç—É"""
    try:
        user_id = int(callback.data.split('_')[-1])
        receipt_data = TemporaryStorage.get_pending_receipt(user_id)
        
        if not receipt_data:
            await callback.answer("‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            return
        
        user_data = receipt_data.get('user_data', {})
        TemporaryStorage.remove_pending_receipt(user_id)  # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await callback.bot.send_message(
            user_id,
            "‚ùå –í–∞—à —á–µ–∫ –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–µ–∫."
        )
        
        await callback.message.edit_text(
            f"‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['full_name']}\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏."
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error rejecting payment: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã")